<?php

declare(strict_types=1);

namespace Database\Factories;

use App\Models\Federation;
use Illuminate\Database\Eloquent\Factories\Factory;

// todo generated by AI double check it

/**
 * @extends Factory<Federation>
 */
final class FederationFactory extends Factory
{
    /**
     * The name of the factory's corresponding model.
     *
     * @var string
     */
    protected $model = Federation::class;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        $types = ['domestic', 'continental', 'international'];
        $regions = ['Europe', 'Americas', 'Asia', 'Africa', 'Oceania', 'Global'];

        return [
            'name' => $this->faker->unique()->company().' Federation',
            'type' => $this->faker->randomElement($types),
            'region' => $this->faker->randomElement($regions),
        ];
    }

    /**
     * Configure the factory to create a domestic federation.
     */
    public function domestic(): self
    {
        return $this->state(function () {
            return [
                'type' => 'domestic',
            ];
        });
    }

    /**
     * Configure the factory to create a continental federation.
     */
    public function continental(): self
    {
        return $this->state(function () {
            return [
                'type' => 'continental',
                'region' => $this->faker->randomElement(['Europe', 'Americas', 'Asia', 'Africa', 'Oceania']),
            ];
        });
    }

    /**
     * Configure the factory to create an international federation.
     */
    public function international(): self
    {
        return $this->state(function () {
            return [
                'type' => 'international',
                'region' => 'Global',
            ];
        });
    }

    /**
     * Configure the factory to create a European federation.
     */
    public function europe(): self
    {
        return $this->state(function () {
            return [
                'region' => 'Europe',
            ];
        });
    }
}
